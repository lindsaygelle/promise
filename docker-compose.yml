version: "3.8"

services:

  node:
    container_name: promise-client
    build: 
      context: ./promise-client
      dockerfile: Dockerfile
    depends_on:
      - server
    environment:
      ADDR: 3000
      CHOKIDAR_USEPOLLING: "true"
      NODE_ENV: development
    user: node
    networks: 
      - client
    ports:
      - "3000:3000"
    volumes:
      - ./promise-client/src:/app/src

  postgres:
    container_name: promise-postgres
    env_file: 
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      interval: 5s
      retries: 3
      start_period: 10s
      test: ["CMD", "pg_isready"]
      timeout: 5s
    image: postgres:alpine
    ports:
      - "5432:5432"
    restart: always
    user: ${POSTGRES_USER}
    volumes:
      - postgres:/var/lib/postgresql/data

  redis:
    command: redis-server --requirepass $REDIS_PASSWORD --appendonly yes
    container_name: promise-redis
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      interval: 5s
      retries: 3
      start_period: 10s
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
    image: redis:alpine
    networks:
      - server
    ports:
      - "6379:6379"
    restart: always

  server:
    container_name: promise-server
    build: 
      context: ./promise-server
      dockerfile: Dockerfile
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment: 
      ADDR: 8000
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: 6379
    ports: 
      - "8000:8000"
    networks: 
      - server

networks:
  client:
  server:

volumes:
  postgres:
